<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.kami.blog.dao.ReplyDao">
    <!-- Reply的resultMap,column是给数据库列起的别名,它对应property类的属性-->
    <resultMap id="result_Reply_Map" type="com.kami.blog.model.Reply">
        <id column="id" property="id" />
        <result column="createTime" property="createTime" />
        <result column="articleId" property="articleId" />
        <result column="userId" property="userId" />
        <result column="content" property="content" />
        <result column="parentId" property="parentId" />
    </resultMap>

	   <!-- Assist用于辅助工具类setRequires设置的条件,${req.require}表示列名,#{req.value}表示值它是防SQL注入的 -->
    <sql id="Assist">
        <where>
            <foreach collection="require" item="req" separator=" ">
                ${req.require} 
                <if test="req.value != null"> #{req.value}</if> 
                <if test="req.values != null">
                    <foreach collection="req.values" item="val" separator=","> 
                        #{val} 
                    </foreach> 
                </if> 
                <if test="req.suffix != null"> ${req.suffix}</if> 
            </foreach>
        </where>
    </sql>

	   <!-- updateAssist用于更新数据的使用它拓展自Assist,用于辅助工具类setRequires设置的条件,${req.require}表示列名,#{req.value}表示值它是防SQL注入的 -->
    <sql id="updateAssist">
        <where>
            <foreach collection="assist.require" item="req" separator=" ">
                ${req.require} 
                <if test="req.value != null"> #{req.value}</if> 
                <if test="req.values != null">
                    <foreach collection="req.values" item="val" separator=","> 
                        #{val} 
                    </foreach> 
                </if> 
                <if test="req.suffix != null"> ${req.suffix}</if> 
            </foreach>
        </where>
    </sql>

    <!-- 数据库中表名为:reply的列名,as前是数据库的列明,as后是列的别名用于映射成实体类中的属性,需要注意的是别名必须与resultMap中的column别名一致 -->
    <sql id="reply_Column">
        reply.id as id
        ,reply.createTime as createTime
        ,reply.articleId as articleId
        ,reply.userId as userId
        ,reply.content as content
        ,reply.parentId as parentId
    </sql>

    <!--获得类名为:Reply对应的数据库表的数据总行数 -->
    <select id="getReplyRowCount" parameterType="com.kami.blog.common.Assist" resultType="java.lang.Long">
        select count(id) from reply
        <if test="require!=null"><include refid="Assist" /></if>
    </select>
    <!-- 获得类名为:Reply对应数据库中表的数据集合 -->
    <select id="selectReply" parameterType="com.kami.blog.common.Assist"  resultMap="result_Reply_Map">
        select  <if test="distinct !=null">${distinct}</if>
        <choose>
            <when test="resultColumn!=null">${resultColumn}</when>
            <otherwise>
        <include refid="reply_Column" /> 
            </otherwise>
        </choose>
        from reply
        <choose>
            <when test="rowSize ==null">
                <if test="require!=null">
                    <include refid="Assist" />
                </if>
                <if test="order !=null">${order}</if>
            </when>
            <otherwise>
                inner join
                (
                SELECT id as primary_key FROM reply
                <if test="require!=null">
                    <include refid="Assist" />
                </if>
                <if test="order !=null">${order}</if>
                <choose>
                    <when test="startRow !=null and rowSize !=null">LIMIT #{startRow},#{rowSize} </when>
                    <when test="rowSize !=null">LIMIT #{rowSize}</when>
                 </choose>
                 ) as tmp
                 on tmp.primary_key=reply.id
            </otherwise>
        </choose>
    </select> 

    <!-- 获得一个Reply对象,以参数Reply对象中不为空的属性作为条件进行查询-->
    <select id="selectReplyByObj" parameterType="com.kami.blog.model.Reply" resultMap="result_Reply_Map">
        select 
            <include refid="reply_Column" /> 
        from reply
        <where>
            <if test="parentId != null "> and reply.parentId = #{parentId}</if>
            <if test="content != null "> and reply.content = #{content}</if>
            <if test="userId != null "> and reply.userId = #{userId}</if>
            <if test="articleId != null "> and reply.articleId = #{articleId}</if>
            <if test="createTime != null "> and reply.createTime = #{createTime}</if>
            <if test="id != null "> and reply.id = #{id}</if>
        </where>
    </select> 

    <!-- 通过Reply的id获得对应数据库中表的数据对象-->
    <select id="selectReplyById" parameterType="java.lang.Integer" resultMap="result_Reply_Map">
        select 
            <include refid="reply_Column" /> 
        from reply
        where reply.id = #{id}
    </select> 

    <!-- 将Reply插入到对应数据库的表中,包括属性值为null的数据-->

    <insert id="insertReply" keyProperty="id"  parameterType="com.kami.blog.model.Reply">
        insert into reply(id,createTime,articleId,userId,content,parentId) 
        values(#{id},#{createTime},#{articleId},#{userId},#{content},#{parentId})
    </insert>

    <!-- 将Reply中属性值不为null的数据,插入到对应数据库的表中-->
    <insert id="insertNonEmptyReply" parameterType="com.kami.blog.model.Reply">
        insert into reply
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">id,</if>
            <if test="createTime != null">createTime,</if>
            <if test="articleId != null">articleId,</if>
            <if test="userId != null">userId,</if>
            <if test="content != null">content,</if>
            <if test="parentId != null">parentId,</if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null"> #{id},</if>
            <if test="createTime != null"> #{createTime},</if>
            <if test="articleId != null"> #{articleId},</if>
            <if test="userId != null"> #{userId},</if>
            <if test="content != null"> #{content},</if>
            <if test="parentId != null"> #{parentId},</if>
        </trim>
    </insert>

    <!-- 将Reply批量插入到对应数据库的表中-->
    <insert id="insertReplyByBatch" parameterType="ArrayList">
        insert into reply(id,createTime,articleId,userId,content,parentId) values
        <foreach collection="list" item="item" index="index" separator="," >
            (#{item.id},#{item.createTime},#{item.articleId},#{item.userId},#{item.content},#{item.parentId})
        </foreach>
    </insert>

    <!-- 通过Reply的id将数据库表中对应的数据删除-->
    <delete id="deleteReplyById" parameterType="java.lang.Integer">
        delete from reply
        where id = #{id}
    </delete>

    <!-- 通过辅助工具Assist中的条件将Reply对应的数据库表的数据删除-->
    <delete id="deleteReply" parameterType="com.kami.blog.common.Assist">
        delete from reply
        <if test="require!=null"><include refid="Assist" /></if>
    </delete>

    <!-- 通过Reply的id将Reply的数据更新到数据库中对应的表,包括值null的数据-->
    <update id="updateReplyById" parameterType="com.kami.blog.model.Reply">
        update reply set
            createTime=#{createTime}
            ,articleId=#{articleId}
            ,userId=#{userId}
            ,content=#{content}
            ,parentId=#{parentId}
        where id=#{id}
    </update>

    <!-- 通过Reply的id将Reply中属性值不为null的数据更新到数据库对应的表中-->
    <update id="updateNonEmptyReplyById" parameterType="com.kami.blog.model.Reply">
        update reply
        <set>
            <if test="createTime != null">
                createTime=#{createTime},
            </if>
            <if test="articleId != null">
                articleId=#{articleId},
            </if>
            <if test="userId != null">
                userId=#{userId},
            </if>
            <if test="content != null">
                content=#{content},
            </if>
            <if test="parentId != null">
                parentId=#{parentId},
            </if>
        </set>
        where id=#{id}
    </update>

    <!-- 通过辅助工具Assist中的条件将Reply中的数据更新到数据库对应的表中,包括值为null的数据-->
    <update id="updateReply" parameterType="map">
        update reply
        <set>
                id=#{enti.id},
                createTime=#{enti.createTime},
                articleId=#{enti.articleId},
                userId=#{enti.userId},
                content=#{enti.content},
                parentId=#{enti.parentId},
        </set>
        <if test="assist.require!=null"><include refid="updateAssist" /></if>
    </update>

    <!-- 通过辅助工具Assist中的条件将Reply中属性值不为null的数据更新到数据库对应的表中-->
    <update id="updateNonEmptyReply" parameterType="map">
        update reply
        <set>
            <if test="enti.id != null">
                id=#{enti.id},
            </if>
            <if test="enti.createTime != null">
                createTime=#{enti.createTime},
            </if>
            <if test="enti.articleId != null">
                articleId=#{enti.articleId},
            </if>
            <if test="enti.userId != null">
                userId=#{enti.userId},
            </if>
            <if test="enti.content != null">
                content=#{enti.content},
            </if>
            <if test="enti.parentId != null">
                parentId=#{enti.parentId},
            </if>
        </set>
        <if test="assist.require!=null"><include refid="updateAssist" /></if>
    </update>

	<delete id="deleteReplyByArticleId" parameterType="java.lang.Integer">
        delete from reply
        where articleId = #{articleId}
    </delete>
	
</mapper>